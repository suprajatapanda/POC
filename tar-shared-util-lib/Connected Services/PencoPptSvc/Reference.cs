// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Diagnostics;

namespace TRS.IT.SI.BusinessFacadeLayer.Adapters.PencoPptSvc
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "TRS.IT.SI.BusinessFacadeLayer.Adapters.PencoPptSvc.IPencoParticipantService")]
    public interface IPencoParticipantService
    {
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/CancelRecurringTransfer", ReplyAction = "http://tempuri.org/IPencoParticipantService/CancelRecurringTransferResponse")]
        string CancelRecurringTransfer(string User_ID, string CancelType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/CancelRecurringTransfer", ReplyAction = "http://tempuri.org/IPencoParticipantService/CancelRecurringTransferResponse")]
        System.Threading.Tasks.Task<string> CancelRecurringTransferAsync(string User_ID, string CancelType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/CancelTransaction", ReplyAction = "http://tempuri.org/IPencoParticipantService/CancelTransactionResponse")]
        string CancelTransaction(string User_ID, string ConfirmationNumber);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/CancelTransaction", ReplyAction = "http://tempuri.org/IPencoParticipantService/CancelTransactionResponse")]
        System.Threading.Tasks.Task<string> CancelTransactionAsync(string User_ID, string ConfirmationNumber);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GenerateConfirmationLetter", ReplyAction = "http://tempuri.org/IPencoParticipantService/GenerateConfirmationLetterResponse")]
        string GenerateConfirmationLetter(string User_ID, string ConfirmationLetterInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GenerateConfirmationLetter", ReplyAction = "http://tempuri.org/IPencoParticipantService/GenerateConfirmationLetterResponse")]
        System.Threading.Tasks.Task<string> GenerateConfirmationLetterAsync(string User_ID, string ConfirmationLetterInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GenerateToken", ReplyAction = "http://tempuri.org/IPencoParticipantService/GenerateTokenResponse")]
        string GenerateToken(string User_ID, string TypeCode, string UrlReturn);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GenerateToken", ReplyAction = "http://tempuri.org/IPencoParticipantService/GenerateTokenResponse")]
        System.Threading.Tasks.Task<string> GenerateTokenAsync(string User_ID, string TypeCode, string UrlReturn);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetAccountSummary", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetAccountSummaryResponse")]
        string GetAccountSummary(string User_ID, string FromDate, string ToDate, int SumType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetAccountSummary", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetAccountSummaryResponse")]
        System.Threading.Tasks.Task<string> GetAccountSummaryAsync(string User_ID, string FromDate, string ToDate, int SumType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetAllLoansData", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetAllLoansDataResponse")]
        string GetAllLoansData(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetAllLoansData", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetAllLoansDataResponse")]
        System.Threading.Tasks.Task<string> GetAllLoansDataAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetAllMoneyTypes", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetAllMoneyTypesResponse")]
        string GetAllMoneyTypes(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetAllMoneyTypes", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetAllMoneyTypesResponse")]
        System.Threading.Tasks.Task<string> GetAllMoneyTypesAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetBeneficiaryInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetBeneficiaryInfoResponse")]
        string GetBeneficiaryInfo(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetBeneficiaryInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetBeneficiaryInfoResponse")]
        System.Threading.Tasks.Task<string> GetBeneficiaryInfoAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetErrorAnalysis", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetErrorAnalysisResponse")]
        string GetErrorAnalysis();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetErrorAnalysis", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetErrorAnalysisResponse")]
        System.Threading.Tasks.Task<string> GetErrorAnalysisAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetLoanAvailability", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetLoanAvailabilityResponse")]
        string GetLoanAvailability(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetLoanAvailability", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetLoanAvailabilityResponse")]
        System.Threading.Tasks.Task<string> GetLoanAvailabilityAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetLoanRepaymentHistory", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetLoanRepaymentHistoryResponse")]
        string GetLoanRepaymentHistory(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetLoanRepaymentHistory", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetLoanRepaymentHistoryResponse")]
        System.Threading.Tasks.Task<string> GetLoanRepaymentHistoryAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetLoanSetupItems", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetLoanSetupItemsResponse")]
        string GetLoanSetupItems(string User_ID, string LoanSetupItemsXml);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetLoanSetupItems", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetLoanSetupItemsResponse")]
        System.Threading.Tasks.Task<string> GetLoanSetupItemsAsync(string User_ID, string LoanSetupItemsXml);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetParticipantInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetParticipantInfoResponse")]
        string GetParticipantInfo(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetParticipantInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetParticipantInfoResponse")]
        System.Threading.Tasks.Task<string> GetParticipantInfoAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetPassword", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetPasswordResponse")]
        string GetPassword(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetPassword", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetPasswordResponse")]
        System.Threading.Tasks.Task<string> GetPasswordAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetPendingTransactionInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetPendingTransactionInfoResponse")]
        string GetPendingTransactionInfo(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetPendingTransactionInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetPendingTransactionInfoResponse")]
        System.Threading.Tasks.Task<string> GetPendingTransactionInfoAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetPersonalProfile", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetPersonalProfileResponse")]
        string GetPersonalProfile(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetPersonalProfile", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetPersonalProfileResponse")]
        System.Threading.Tasks.Task<string> GetPersonalProfileAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetProcessingHistory", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetProcessingHistoryResponse")]
        string GetProcessingHistory(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetProcessingHistory", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetProcessingHistoryResponse")]
        System.Threading.Tasks.Task<string> GetProcessingHistoryAsync(string User_ID);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetSystemStatus", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetSystemStatusResponse")]
        string GetSystemStatus();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetSystemStatus", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetSystemStatusResponse")]
        System.Threading.Tasks.Task<string> GetSystemStatusAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetTransactionHistory", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetTransactionHistoryResponse")]
        string GetTransactionHistory(string User_ID, string FromDate, string ToDate);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/GetTransactionHistory", ReplyAction = "http://tempuri.org/IPencoParticipantService/GetTransactionHistoryResponse")]
        System.Threading.Tasks.Task<string> GetTransactionHistoryAsync(string User_ID, string FromDate, string ToDate);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/RebalanceFunds", ReplyAction = "http://tempuri.org/IPencoParticipantService/RebalanceFundsResponse")]
        string RebalanceFunds(string User_ID, string TransferFreq, string FundInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/RebalanceFunds", ReplyAction = "http://tempuri.org/IPencoParticipantService/RebalanceFundsResponse")]
        System.Threading.Tasks.Task<string> RebalanceFundsAsync(string User_ID, string TransferFreq, string FundInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/RequestLoan", ReplyAction = "http://tempuri.org/IPencoParticipantService/RequestLoanResponse")]
        string RequestLoan(string User_ID, string LoanInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/RequestLoan", ReplyAction = "http://tempuri.org/IPencoParticipantService/RequestLoanResponse")]
        System.Threading.Tasks.Task<string> RequestLoanAsync(string User_ID, string LoanInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/StatementRequest", ReplyAction = "http://tempuri.org/IPencoParticipantService/StatementRequestResponse")]
        string StatementRequest(string User_ID, string FromDate, string ToDate, string in_OM, string RptType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/StatementRequest", ReplyAction = "http://tempuri.org/IPencoParticipantService/StatementRequestResponse")]
        System.Threading.Tasks.Task<string> StatementRequestAsync(string User_ID, string FromDate, string ToDate, string in_OM, string RptType);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/TransferFunds", ReplyAction = "http://tempuri.org/IPencoParticipantService/TransferFundsResponse")]
        string TransferFunds(string User_ID, string FundTransfer);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/TransferFunds", ReplyAction = "http://tempuri.org/IPencoParticipantService/TransferFundsResponse")]
        System.Threading.Tasks.Task<string> TransferFundsAsync(string User_ID, string FundTransfer);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateCatchupContributions", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateCatchupContributionsResponse")]
        string UpdateCatchupContributions(string User_ID, string CatchupInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateCatchupContributions", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateCatchupContributionsResponse")]
        System.Threading.Tasks.Task<string> UpdateCatchupContributionsAsync(string User_ID, string CatchupInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateDeferralContributions", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateDeferralContributionsResponse")]
        string UpdateDeferralContributions(string User_ID, string DeferralInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateDeferralContributions", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateDeferralContributionsResponse")]
        System.Threading.Tasks.Task<string> UpdateDeferralContributionsAsync(string User_ID, string DeferralInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateInvestmentElections", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateInvestmentElectionsResponse")]
        string UpdateInvestmentElections(string User_ID, string in_FundInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateInvestmentElections", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateInvestmentElectionsResponse")]
        System.Threading.Tasks.Task<string> UpdateInvestmentElectionsAsync(string User_ID, string in_FundInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdatePassword", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdatePasswordResponse")]
        string UpdatePassword(string User_ID, string oldPass, string newPass, string genPin);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdatePassword", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<string> UpdatePasswordAsync(string User_ID, string oldPass, string newPass, string genPin);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdatePersonalProfile", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdatePersonalProfileResponse")]
        string UpdatePersonalProfile(string User_ID, string PersonalProfile);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdatePersonalProfile", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdatePersonalProfileResponse")]
        System.Threading.Tasks.Task<string> UpdatePersonalProfileAsync(string User_ID, string PersonalProfile);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdatePXInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdatePXInfoResponse")]
        string UpdatePXInfo(string User_ID, string PXDataXml);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdatePXInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdatePXInfoResponse")]
        System.Threading.Tasks.Task<string> UpdatePXInfoAsync(string User_ID, string PXDataXml);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateVesting", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateVestingResponse")]
        string UpdateVesting(string User_ID, string ParticipantVestingInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateVesting", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateVestingResponse")]
        System.Threading.Tasks.Task<string> UpdateVestingAsync(string User_ID, string ParticipantVestingInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateBeneficiaryInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateBeneficiaryInfoResponse")]
        string UpdateBeneficiaryInfo(string User_ID, string BeneficiaryInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPencoParticipantService/UpdateBeneficiaryInfo", ReplyAction = "http://tempuri.org/IPencoParticipantService/UpdateBeneficiaryInfoResponse")]
        System.Threading.Tasks.Task<string> UpdateBeneficiaryInfoAsync(string User_ID, string BeneficiaryInfo);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IPencoParticipantServiceChannel : TRS.IT.SI.BusinessFacadeLayer.Adapters.PencoPptSvc.IPencoParticipantService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class PencoParticipantServiceClient : System.ServiceModel.ClientBase<TRS.IT.SI.BusinessFacadeLayer.Adapters.PencoPptSvc.IPencoParticipantService>, TRS.IT.SI.BusinessFacadeLayer.Adapters.PencoPptSvc.IPencoParticipantService
    {
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public PencoParticipantServiceClient(EndpointConfiguration endpointConfiguration) :
                base(PencoParticipantServiceClient.GetBindingForEndpoint(endpointConfiguration), PencoParticipantServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public PencoParticipantServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(PencoParticipantServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public PencoParticipantServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(PencoParticipantServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public PencoParticipantServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public string CancelRecurringTransfer(string User_ID, string CancelType)
        {
            return base.Channel.CancelRecurringTransfer(User_ID, CancelType);
        }

        public System.Threading.Tasks.Task<string> CancelRecurringTransferAsync(string User_ID, string CancelType)
        {
            return base.Channel.CancelRecurringTransferAsync(User_ID, CancelType);
        }

        public string CancelTransaction(string User_ID, string ConfirmationNumber)
        {
            return base.Channel.CancelTransaction(User_ID, ConfirmationNumber);
        }

        public System.Threading.Tasks.Task<string> CancelTransactionAsync(string User_ID, string ConfirmationNumber)
        {
            return base.Channel.CancelTransactionAsync(User_ID, ConfirmationNumber);
        }

        public string GenerateConfirmationLetter(string User_ID, string ConfirmationLetterInfo)
        {
            return base.Channel.GenerateConfirmationLetter(User_ID, ConfirmationLetterInfo);
        }

        public System.Threading.Tasks.Task<string> GenerateConfirmationLetterAsync(string User_ID, string ConfirmationLetterInfo)
        {
            return base.Channel.GenerateConfirmationLetterAsync(User_ID, ConfirmationLetterInfo);
        }

        public string GenerateToken(string User_ID, string TypeCode, string UrlReturn)
        {
            return base.Channel.GenerateToken(User_ID, TypeCode, UrlReturn);
        }

        public System.Threading.Tasks.Task<string> GenerateTokenAsync(string User_ID, string TypeCode, string UrlReturn)
        {
            return base.Channel.GenerateTokenAsync(User_ID, TypeCode, UrlReturn);
        }

        public string GetAccountSummary(string User_ID, string FromDate, string ToDate, int SumType)
        {
            return base.Channel.GetAccountSummary(User_ID, FromDate, ToDate, SumType);
        }

        public System.Threading.Tasks.Task<string> GetAccountSummaryAsync(string User_ID, string FromDate, string ToDate, int SumType)
        {
            return base.Channel.GetAccountSummaryAsync(User_ID, FromDate, ToDate, SumType);
        }

        public string GetAllLoansData(string User_ID)
        {
            return base.Channel.GetAllLoansData(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetAllLoansDataAsync(string User_ID)
        {
            return base.Channel.GetAllLoansDataAsync(User_ID);
        }

        public string GetAllMoneyTypes(string User_ID)
        {
            return base.Channel.GetAllMoneyTypes(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetAllMoneyTypesAsync(string User_ID)
        {
            return base.Channel.GetAllMoneyTypesAsync(User_ID);
        }

        public string GetBeneficiaryInfo(string User_ID)
        {
            return base.Channel.GetBeneficiaryInfo(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetBeneficiaryInfoAsync(string User_ID)
        {
            return base.Channel.GetBeneficiaryInfoAsync(User_ID);
        }

        public string GetErrorAnalysis()
        {
            return base.Channel.GetErrorAnalysis();
        }

        public System.Threading.Tasks.Task<string> GetErrorAnalysisAsync()
        {
            return base.Channel.GetErrorAnalysisAsync();
        }

        public string GetLoanAvailability(string User_ID)
        {
            return base.Channel.GetLoanAvailability(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetLoanAvailabilityAsync(string User_ID)
        {
            return base.Channel.GetLoanAvailabilityAsync(User_ID);
        }

        public string GetLoanRepaymentHistory(string User_ID)
        {
            return base.Channel.GetLoanRepaymentHistory(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetLoanRepaymentHistoryAsync(string User_ID)
        {
            return base.Channel.GetLoanRepaymentHistoryAsync(User_ID);
        }

        public string GetLoanSetupItems(string User_ID, string LoanSetupItemsXml)
        {
            return base.Channel.GetLoanSetupItems(User_ID, LoanSetupItemsXml);
        }

        public System.Threading.Tasks.Task<string> GetLoanSetupItemsAsync(string User_ID, string LoanSetupItemsXml)
        {
            return base.Channel.GetLoanSetupItemsAsync(User_ID, LoanSetupItemsXml);
        }

        public string GetParticipantInfo(string User_ID)
        {
            return base.Channel.GetParticipantInfo(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetParticipantInfoAsync(string User_ID)
        {
            return base.Channel.GetParticipantInfoAsync(User_ID);
        }

        public string GetPassword(string User_ID)
        {
            return base.Channel.GetPassword(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetPasswordAsync(string User_ID)
        {
            return base.Channel.GetPasswordAsync(User_ID);
        }

        public string GetPendingTransactionInfo(string User_ID)
        {
            return base.Channel.GetPendingTransactionInfo(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetPendingTransactionInfoAsync(string User_ID)
        {
            return base.Channel.GetPendingTransactionInfoAsync(User_ID);
        }

        public string GetPersonalProfile(string User_ID)
        {
            return base.Channel.GetPersonalProfile(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetPersonalProfileAsync(string User_ID)
        {
            return base.Channel.GetPersonalProfileAsync(User_ID);
        }

        public string GetProcessingHistory(string User_ID)
        {
            return base.Channel.GetProcessingHistory(User_ID);
        }

        public System.Threading.Tasks.Task<string> GetProcessingHistoryAsync(string User_ID)
        {
            return base.Channel.GetProcessingHistoryAsync(User_ID);
        }

        public string GetSystemStatus()
        {
            return base.Channel.GetSystemStatus();
        }

        public System.Threading.Tasks.Task<string> GetSystemStatusAsync()
        {
            return base.Channel.GetSystemStatusAsync();
        }

        public string GetTransactionHistory(string User_ID, string FromDate, string ToDate)
        {
            return base.Channel.GetTransactionHistory(User_ID, FromDate, ToDate);
        }

        public System.Threading.Tasks.Task<string> GetTransactionHistoryAsync(string User_ID, string FromDate, string ToDate)
        {
            return base.Channel.GetTransactionHistoryAsync(User_ID, FromDate, ToDate);
        }

        public string RebalanceFunds(string User_ID, string TransferFreq, string FundInfo)
        {
            return base.Channel.RebalanceFunds(User_ID, TransferFreq, FundInfo);
        }

        public System.Threading.Tasks.Task<string> RebalanceFundsAsync(string User_ID, string TransferFreq, string FundInfo)
        {
            return base.Channel.RebalanceFundsAsync(User_ID, TransferFreq, FundInfo);
        }

        public string RequestLoan(string User_ID, string LoanInfo)
        {
            return base.Channel.RequestLoan(User_ID, LoanInfo);
        }

        public System.Threading.Tasks.Task<string> RequestLoanAsync(string User_ID, string LoanInfo)
        {
            return base.Channel.RequestLoanAsync(User_ID, LoanInfo);
        }

        public string StatementRequest(string User_ID, string FromDate, string ToDate, string in_OM, string RptType)
        {
            return base.Channel.StatementRequest(User_ID, FromDate, ToDate, in_OM, RptType);
        }

        public System.Threading.Tasks.Task<string> StatementRequestAsync(string User_ID, string FromDate, string ToDate, string in_OM, string RptType)
        {
            return base.Channel.StatementRequestAsync(User_ID, FromDate, ToDate, in_OM, RptType);
        }

        public string TransferFunds(string User_ID, string FundTransfer)
        {
            return base.Channel.TransferFunds(User_ID, FundTransfer);
        }

        public System.Threading.Tasks.Task<string> TransferFundsAsync(string User_ID, string FundTransfer)
        {
            return base.Channel.TransferFundsAsync(User_ID, FundTransfer);
        }

        public string UpdateCatchupContributions(string User_ID, string CatchupInfo)
        {
            return base.Channel.UpdateCatchupContributions(User_ID, CatchupInfo);
        }

        public System.Threading.Tasks.Task<string> UpdateCatchupContributionsAsync(string User_ID, string CatchupInfo)
        {
            return base.Channel.UpdateCatchupContributionsAsync(User_ID, CatchupInfo);
        }

        public string UpdateDeferralContributions(string User_ID, string DeferralInfo)
        {
            return base.Channel.UpdateDeferralContributions(User_ID, DeferralInfo);
        }

        public System.Threading.Tasks.Task<string> UpdateDeferralContributionsAsync(string User_ID, string DeferralInfo)
        {
            return base.Channel.UpdateDeferralContributionsAsync(User_ID, DeferralInfo);
        }

        public string UpdateInvestmentElections(string User_ID, string in_FundInfo)
        {
            return base.Channel.UpdateInvestmentElections(User_ID, in_FundInfo);
        }

        public System.Threading.Tasks.Task<string> UpdateInvestmentElectionsAsync(string User_ID, string in_FundInfo)
        {
            return base.Channel.UpdateInvestmentElectionsAsync(User_ID, in_FundInfo);
        }

        public string UpdatePassword(string User_ID, string oldPass, string newPass, string genPin)
        {
            return base.Channel.UpdatePassword(User_ID, oldPass, newPass, genPin);
        }

        public System.Threading.Tasks.Task<string> UpdatePasswordAsync(string User_ID, string oldPass, string newPass, string genPin)
        {
            return base.Channel.UpdatePasswordAsync(User_ID, oldPass, newPass, genPin);
        }

        public string UpdatePersonalProfile(string User_ID, string PersonalProfile)
        {
            return base.Channel.UpdatePersonalProfile(User_ID, PersonalProfile);
        }

        public System.Threading.Tasks.Task<string> UpdatePersonalProfileAsync(string User_ID, string PersonalProfile)
        {
            return base.Channel.UpdatePersonalProfileAsync(User_ID, PersonalProfile);
        }

        public string UpdatePXInfo(string User_ID, string PXDataXml)
        {
            return base.Channel.UpdatePXInfo(User_ID, PXDataXml);
        }

        public System.Threading.Tasks.Task<string> UpdatePXInfoAsync(string User_ID, string PXDataXml)
        {
            return base.Channel.UpdatePXInfoAsync(User_ID, PXDataXml);
        }

        public string UpdateVesting(string User_ID, string ParticipantVestingInfo)
        {
            return base.Channel.UpdateVesting(User_ID, ParticipantVestingInfo);
        }

        public System.Threading.Tasks.Task<string> UpdateVestingAsync(string User_ID, string ParticipantVestingInfo)
        {
            return base.Channel.UpdateVestingAsync(User_ID, ParticipantVestingInfo);
        }

        public string UpdateBeneficiaryInfo(string User_ID, string BeneficiaryInfo)
        {
            return base.Channel.UpdateBeneficiaryInfo(User_ID, BeneficiaryInfo);
        }

        public System.Threading.Tasks.Task<string> UpdateBeneficiaryInfoAsync(string User_ID, string BeneficiaryInfo)
        {
            return base.Channel.UpdateBeneficiaryInfoAsync(User_ID, BeneficiaryInfo);
        }

        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPencoParticipantService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IPencoParticipantService))
            {
                System.ServiceModel.WSHttpBinding result = new System.ServiceModel.WSHttpBinding();
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.SecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name '{0}'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPencoParticipantService))
            {
                return new System.ServiceModel.EndpointAddress("http://yourservice.com/PencoParticipantService.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_IPencoParticipantService))
            {
                return new System.ServiceModel.EndpointAddress("https://yourservice.com/PencoParticipantService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name '{0}'.", endpointConfiguration));
        }

        public enum EndpointConfiguration
        {
            BasicHttpBinding_IPencoParticipantService,

            WSHttpBinding_IPencoParticipantService,
        }
    }
}
// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.Threading.Tasks;
using System.Net;

namespace TRS.IT.SI.BusinessFacadeLayer.Adapters.DEMOWSReport
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace = "http://tempuri.org/", ConfigurationName = "TRS.IT.SI.BusinessFacadeLayer.Adapters.DEMOWSReport.IDemoReportsService")]
    public interface IDemoReportsService
    {
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ReportRequest", ReplyAction = "http://tempuri.org/ReportRequestResponse")]
        string ReportRequest(string ContractID, string SubID, string ReportInfo);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/ReportRequest", ReplyAction = "http://tempuri.org/ReportRequestResponse")]
        Task<string> ReportRequestAsync(string ContractID, string SubID, string ReportInfo);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IDemoReportsServiceChannel : TRS.IT.SI.BusinessFacadeLayer.Adapters.DEMOWSReport.IDemoReportsService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class DemoReportsServiceClient : System.ServiceModel.ClientBase<TRS.IT.SI.BusinessFacadeLayer.Adapters.DEMOWSReport.IDemoReportsService>, TRS.IT.SI.BusinessFacadeLayer.Adapters.DEMOWSReport.IDemoReportsService
    {
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public DemoReportsServiceClient(EndpointConfiguration endpointConfiguration) :
                base(DemoReportsServiceClient.GetBindingForEndpoint(endpointConfiguration), DemoReportsServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public DemoReportsServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                base(DemoReportsServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public DemoReportsServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                base(DemoReportsServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }

        public DemoReportsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public string ReportRequest(string ContractID, string SubID, string ReportInfo)
        {
            return base.Channel.ReportRequest(ContractID, SubID, ReportInfo);
        }

        public Task<string> ReportRequestAsync(string ContractID, string SubID, string ReportInfo)
        {
            return base.Channel.ReportRequestAsync(ContractID, SubID, ReportInfo);
        }

        public virtual Task OpenAsync()
        {
            return Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new Action<IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }

        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DemoReportsServiceSoap))
            {
                BasicHttpBinding result = new BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;

                // Configure timeouts
                result.OpenTimeout = TimeSpan.FromMinutes(1);
                result.CloseTimeout = TimeSpan.FromMinutes(1);
                result.SendTimeout = TimeSpan.FromMinutes(10);
                result.ReceiveTimeout = TimeSpan.FromMinutes(10);

                // If the service requires HTTPS, uncomment the following line:
                // result.Security.Mode = BasicHttpSecurityMode.Transport;

                return result;
            }
            throw new InvalidOperationException(string.Format("Could not find endpoint with name '{0}'.", endpointConfiguration));
        }

        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DemoReportsServiceSoap))
            {
                // Read URL from configuration or use default
                string urlSetting = null; // TrsAppSettings.AppSettings.GetValue("DemoReportWebServiceURL");
                string url = !string.IsNullOrEmpty(urlSetting)
                    ? urlSetting
                    : "http://demo.ta-retirement.com/TRSServices/DemoReportsService.asmx";

                return new System.ServiceModel.EndpointAddress(url);
            }
            throw new InvalidOperationException(string.Format("Could not find endpoint with name '{0}'.", endpointConfiguration));
        }

        public enum EndpointConfiguration
        {
            DemoReportsServiceSoap,
        }
    }

    /// <summary>
    /// Configuration helper for DemoReportsService
    /// </summary>
    public static class DemoReportsServiceConfiguration
    {
        /// <summary>
        /// Creates a configured instance of the DemoReportsServiceClient
        /// </summary>
        public static DemoReportsServiceClient CreateClient()
        {
            var client = new DemoReportsServiceClient(DemoReportsServiceClient.EndpointConfiguration.DemoReportsServiceSoap);

            // Configure credentials
            client.ClientCredentials.Windows.ClientCredential = CredentialCache.DefaultNetworkCredentials;

            return client;
        }

        /// <summary>
        /// Creates a configured instance with a custom endpoint address
        /// </summary>
        public static DemoReportsServiceClient CreateClient(string endpointUrl)
        {
            var client = new DemoReportsServiceClient(
                DemoReportsServiceClient.EndpointConfiguration.DemoReportsServiceSoap,
                endpointUrl);

            // Configure credentials
            client.ClientCredentials.Windows.ClientCredential = CredentialCache.DefaultNetworkCredentials;

            return client;
        }

        /// <summary>
        /// Creates a client with configuration from appsettings.json or other configuration source
        /// </summary>
        /// <param name="configuration">IConfiguration instance</param>
        public static DemoReportsServiceClient CreateClient(Microsoft.Extensions.Configuration.IConfiguration configuration)
        {
            string endpointUrl = configuration["DemoReportWebServiceURL"]
                ?? "http://demo.ta-retirement.com/TRSServices/DemoReportsService.asmx";

            return CreateClient(endpointUrl);
        }
    }

    /// <summary>
    /// Example usage of the migrated DemoReportsService
    /// </summary>
    public class DemoReportsServiceExample
    {
        public async Task<string> GenerateReportExample(string contractId, string subId, string reportInfo)
        {
            using (var client = DemoReportsServiceConfiguration.CreateClient())
            {
                try
                {
                    // Open the client connection
                    await client.OpenAsync();

                    // Make the async call
                    string result = await client.ReportRequestAsync(contractId, subId, reportInfo);

                    return result;
                }
                catch (FaultException ex)
                {
                    // Handle SOAP faults
                    Console.WriteLine($"SOAP Fault: {ex.Message}");
                    throw;
                }
                catch (CommunicationException ex)
                {
                    // Handle communication errors
                    Console.WriteLine($"Communication error: {ex.Message}");
                    throw;
                }
                catch (TimeoutException ex)
                {
                    // Handle timeout errors
                    Console.WriteLine($"Timeout error: {ex.Message}");
                    throw;
                }
                finally
                {
                    // Ensure proper cleanup
                    if (client.State == CommunicationState.Faulted)
                    {
                        client.Abort();
                    }
                    else
                    {
                        try
                        {
                            await client.CloseAsync();
                        }
                        catch
                        {
                            client.Abort();
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Example with synchronous call (for backward compatibility)
        /// </summary>
        public string GenerateReportSync(string contractId, string subId, string reportInfo)
        {
            using (var client = DemoReportsServiceConfiguration.CreateClient())
            {
                try
                {
                    // Make the synchronous call
                    return client.ReportRequest(contractId, subId, reportInfo);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error: {ex.Message}");
                    throw;
                }
                finally
                {
                    // Ensure proper cleanup
                    if (client.State == CommunicationState.Faulted)
                    {
                        client.Abort();
                    }
                    else
                    {
                        client.Close();
                    }
                }
            }
        }
    }

    /// <summary>
    /// Extension methods for async operations
    /// </summary>
    public static class DemoReportsServiceExtensions
    {
        public static async Task CloseAsync(this ICommunicationObject communicationObject)
        {
            await Task.Factory.FromAsync(
                communicationObject.BeginClose,
                communicationObject.EndClose,
                null);
        }
    }
}
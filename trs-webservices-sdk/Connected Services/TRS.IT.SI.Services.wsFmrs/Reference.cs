//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TRS.IT.SI.Services.wsFmrs
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://transamerica.com/LosAngeles/", ConfigurationName="TRS.IT.SI.Services.wsFmrs.FMRSSoap")]
    public interface FMRSSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/GetFMRSFundsXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFMRSFundsXml(string xFundParamsXml, int iFundType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/GetFMRSFundsXml", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFMRSFundsXmlAsync(string xFundParamsXml, int iFundType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/GetFMRSFunds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        TRS.IT.SI.Services.wsFmrs.ArrayOfXElement GetFMRSFunds(string xFundParamsXml, int iFundType, int iFMRSReturnType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/GetFMRSFunds", ReplyAction="*")]
        System.Threading.Tasks.Task<TRS.IT.SI.Services.wsFmrs.ArrayOfXElement> GetFMRSFundsAsync(string xFundParamsXml, int iFundType, int iFMRSReturnType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/GetFMRSFundCategory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetFMRSFundCategory(string sUserName, System.DateTime AsOfDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/GetFMRSFundCategory", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetFMRSFundCategoryAsync(string sUserName, System.DateTime AsOfDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/AddDeleteFunds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AddDeleteFunds(string fmrsXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/AddDeleteFunds", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AddDeleteFundsAsync(string fmrsXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/UpdateFundLineup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateFundLineup(string a_sInputXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://transamerica.com/LosAngeles/UpdateFundLineup", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateFundLineupAsync(string a_sInputXml);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface FMRSSoapChannel : TRS.IT.SI.Services.wsFmrs.FMRSSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class FMRSSoapClient : System.ServiceModel.ClientBase<TRS.IT.SI.Services.wsFmrs.FMRSSoap>, TRS.IT.SI.Services.wsFmrs.FMRSSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FMRSSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(FMRSSoapClient.GetBindingForEndpoint(endpointConfiguration), FMRSSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FMRSSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FMRSSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FMRSSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FMRSSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FMRSSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GetFMRSFundsXml(string xFundParamsXml, int iFundType)
        {
            return base.Channel.GetFMRSFundsXml(xFundParamsXml, iFundType);
        }
        
        public System.Threading.Tasks.Task<string> GetFMRSFundsXmlAsync(string xFundParamsXml, int iFundType)
        {
            return base.Channel.GetFMRSFundsXmlAsync(xFundParamsXml, iFundType);
        }
        
        public TRS.IT.SI.Services.wsFmrs.ArrayOfXElement GetFMRSFunds(string xFundParamsXml, int iFundType, int iFMRSReturnType)
        {
            return base.Channel.GetFMRSFunds(xFundParamsXml, iFundType, iFMRSReturnType);
        }
        
        public System.Threading.Tasks.Task<TRS.IT.SI.Services.wsFmrs.ArrayOfXElement> GetFMRSFundsAsync(string xFundParamsXml, int iFundType, int iFMRSReturnType)
        {
            return base.Channel.GetFMRSFundsAsync(xFundParamsXml, iFundType, iFMRSReturnType);
        }
        
        public string GetFMRSFundCategory(string sUserName, System.DateTime AsOfDate)
        {
            return base.Channel.GetFMRSFundCategory(sUserName, AsOfDate);
        }
        
        public System.Threading.Tasks.Task<string> GetFMRSFundCategoryAsync(string sUserName, System.DateTime AsOfDate)
        {
            return base.Channel.GetFMRSFundCategoryAsync(sUserName, AsOfDate);
        }
        
        public string[] AddDeleteFunds(string fmrsXML)
        {
            return base.Channel.AddDeleteFunds(fmrsXML);
        }
        
        public System.Threading.Tasks.Task<string[]> AddDeleteFundsAsync(string fmrsXML)
        {
            return base.Channel.AddDeleteFundsAsync(fmrsXML);
        }
        
        public string UpdateFundLineup(string a_sInputXml)
        {
            return base.Channel.UpdateFundLineup(a_sInputXml);
        }
        
        public System.Threading.Tasks.Task<string> UpdateFundLineupAsync(string a_sInputXml)
        {
            return base.Channel.UpdateFundLineupAsync(a_sInputXml);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.FMRSSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.FMRSSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.FMRSSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://trs-services-tst.us.aegon.com:8443/FMRS.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.FMRSSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://trs-services-tst.us.aegon.com:8443/FMRS.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            FMRSSoap,
            
            FMRSSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.2.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TRS.IT.SI.Services.wsTrsPlanProv
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TRS.IT.SI.Services.wsTrsPlanProv.TRSPlanProvSoap")]
    public interface TRSPlanProvSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetContractFeatureFlagObj", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string SetContractFeatureFlagObj(TRS.IT.SI.Services.wsTrsPlanProv.ContractFeaturesParams objContractFeatures);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetContractFeatureFlagObj", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SetContractFeatureFlagObjAsync(TRS.IT.SI.Services.wsTrsPlanProv.ContractFeaturesParams objContractFeatures);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetContractFeatureFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string SetContractFeatureFlag(string strXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetContractFeatureFlag", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SetContractFeatureFlagAsync(string strXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAuditLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string GetAuditLog(string AuditStartDate, string AuditEndDate, string AuditTablename, string AuditColumnname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAuditLog", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAuditLogAsync(string AuditStartDate, string AuditEndDate, string AuditTablename, string AuditColumnname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAuditLogObj", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string GetAuditLogObj(TRS.IT.SI.Services.wsTrsPlanProv.AuditLogParams objAuditLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAuditLogObj", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAuditLogObjAsync(TRS.IT.SI.Services.wsTrsPlanProv.AuditLogParams objAuditLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPlanAmendments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string GetPlanAmendments(string strContractID, string strSubID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPlanAmendments", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPlanAmendmentsAsync(string strContractID, string strSubID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPlanCompensation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string GetPlanCompensation(string strContractID, string strSubID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPlanCompensation", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPlanCompensationAsync(string strContractID, string strSubID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteRSWorkFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string deleteRSWorkFlow(string contractID, string subID, string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/deleteRSWorkFlow", ReplyAction="*")]
        System.Threading.Tasks.Task<string> deleteRSWorkFlowAsync(string contractID, string subID, string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getTPACases", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        TRS.IT.SI.Services.wsTrsPlanProv.ArrayOfXElement getTPACases(string contractXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getTPACases", ReplyAction="*")]
        System.Threading.Tasks.Task<TRS.IT.SI.Services.wsTrsPlanProv.ArrayOfXElement> getTPACasesAsync(string contractXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPassLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string GetPassLog(string PassStartDate, string PassEndDate, string CallAppUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPassLog", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPassLogAsync(string PassStartDate, string PassEndDate, string CallAppUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListForPlanYrEndDt", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string ListForPlanYrEndDt(string strForDate, string CallAppUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListForPlanYrEndDt", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ListForPlanYrEndDtAsync(string strForDate, string CallAppUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListForHardshipLift", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string ListForHardshipLift(string strStartDate, string strEndDate, string CallAppUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListForHardshipLift", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ListForHardshipLiftAsync(string strStartDate, string strEndDate, string CallAppUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocGenFundRider", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string DocGenFundRider(string ContractID, string SubID, string CallingAppUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocGenFundRider", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DocGenFundRiderAsync(string ContractID, string SubID, string CallingAppUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocGenDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string DocGenDocument(string ContractID, string SubID, string DocType, string CallingAppUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocGenDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DocGenDocumentAsync(string ContractID, string SubID, string DocType, string CallingAppUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateSPP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ContractParams))]
        string GenerateSPP(string cid, string sid, string QCDate, string cTypeOfDoc, string LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GenerateSPP", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GenerateSPPAsync(string cid, string sid, string QCDate, string cTypeOfDoc, string LoginID);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ContractFeaturesParams : ContractParams
    {
        
        private string cFProspectusElectronicField;
        
        private string cFInvestmentPlatformField;
        
        private string cFSecurePathField;
        
        private string cFRolloverReferralProgramField;
        
        private string cFServiceAgreementField;
        
        private string cFServiceAgreementPSExecField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CFProspectusElectronic
        {
            get
            {
                return this.cFProspectusElectronicField;
            }
            set
            {
                this.cFProspectusElectronicField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CFInvestmentPlatform
        {
            get
            {
                return this.cFInvestmentPlatformField;
            }
            set
            {
                this.cFInvestmentPlatformField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string CFSecurePath
        {
            get
            {
                return this.cFSecurePathField;
            }
            set
            {
                this.cFSecurePathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string CFRolloverReferralProgram
        {
            get
            {
                return this.cFRolloverReferralProgramField;
            }
            set
            {
                this.cFRolloverReferralProgramField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string CFServiceAgreement
        {
            get
            {
                return this.cFServiceAgreementField;
            }
            set
            {
                this.cFServiceAgreementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string CFServiceAgreementPSExec
        {
            get
            {
                return this.cFServiceAgreementPSExecField;
            }
            set
            {
                this.cFServiceAgreementPSExecField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContractFeaturesParams))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ContractParams
    {
        
        private string cFContractIDField;
        
        private string cFSubIDField;
        
        private string cFClientIDField;
        
        private string cFPlanIDField;
        
        private string xMLContractFeaturesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CFContractID
        {
            get
            {
                return this.cFContractIDField;
            }
            set
            {
                this.cFContractIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CFSubID
        {
            get
            {
                return this.cFSubIDField;
            }
            set
            {
                this.cFSubIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string CFClientID
        {
            get
            {
                return this.cFClientIDField;
            }
            set
            {
                this.cFClientIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string CFPlanID
        {
            get
            {
                return this.cFPlanIDField;
            }
            set
            {
                this.cFPlanIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string XMLContractFeatures
        {
            get
            {
                return this.xMLContractFeaturesField;
            }
            set
            {
                this.xMLContractFeaturesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AuditLogParams
    {
        
        private string auditLogStartDtField;
        
        private string auditLogEndDtField;
        
        private string auditLogTblNameField;
        
        private string auditLogClmnNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AuditLogStartDt
        {
            get
            {
                return this.auditLogStartDtField;
            }
            set
            {
                this.auditLogStartDtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AuditLogEndDt
        {
            get
            {
                return this.auditLogEndDtField;
            }
            set
            {
                this.auditLogEndDtField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string AuditLogTblName
        {
            get
            {
                return this.auditLogTblNameField;
            }
            set
            {
                this.auditLogTblNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string AuditLogClmnName
        {
            get
            {
                return this.auditLogClmnNameField;
            }
            set
            {
                this.auditLogClmnNameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface TRSPlanProvSoapChannel : TRS.IT.SI.Services.wsTrsPlanProv.TRSPlanProvSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class TRSPlanProvSoapClient : System.ServiceModel.ClientBase<TRS.IT.SI.Services.wsTrsPlanProv.TRSPlanProvSoap>, TRS.IT.SI.Services.wsTrsPlanProv.TRSPlanProvSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TRSPlanProvSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(TRSPlanProvSoapClient.GetBindingForEndpoint(endpointConfiguration), TRSPlanProvSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TRSPlanProvSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TRSPlanProvSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TRSPlanProvSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TRSPlanProvSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TRSPlanProvSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string SetContractFeatureFlagObj(TRS.IT.SI.Services.wsTrsPlanProv.ContractFeaturesParams objContractFeatures)
        {
            return base.Channel.SetContractFeatureFlagObj(objContractFeatures);
        }
        
        public System.Threading.Tasks.Task<string> SetContractFeatureFlagObjAsync(TRS.IT.SI.Services.wsTrsPlanProv.ContractFeaturesParams objContractFeatures)
        {
            return base.Channel.SetContractFeatureFlagObjAsync(objContractFeatures);
        }
        
        public string SetContractFeatureFlag(string strXml)
        {
            return base.Channel.SetContractFeatureFlag(strXml);
        }
        
        public System.Threading.Tasks.Task<string> SetContractFeatureFlagAsync(string strXml)
        {
            return base.Channel.SetContractFeatureFlagAsync(strXml);
        }
        
        public string GetAuditLog(string AuditStartDate, string AuditEndDate, string AuditTablename, string AuditColumnname)
        {
            return base.Channel.GetAuditLog(AuditStartDate, AuditEndDate, AuditTablename, AuditColumnname);
        }
        
        public System.Threading.Tasks.Task<string> GetAuditLogAsync(string AuditStartDate, string AuditEndDate, string AuditTablename, string AuditColumnname)
        {
            return base.Channel.GetAuditLogAsync(AuditStartDate, AuditEndDate, AuditTablename, AuditColumnname);
        }
        
        public string GetAuditLogObj(TRS.IT.SI.Services.wsTrsPlanProv.AuditLogParams objAuditLog)
        {
            return base.Channel.GetAuditLogObj(objAuditLog);
        }
        
        public System.Threading.Tasks.Task<string> GetAuditLogObjAsync(TRS.IT.SI.Services.wsTrsPlanProv.AuditLogParams objAuditLog)
        {
            return base.Channel.GetAuditLogObjAsync(objAuditLog);
        }
        
        public string GetPlanAmendments(string strContractID, string strSubID)
        {
            return base.Channel.GetPlanAmendments(strContractID, strSubID);
        }
        
        public System.Threading.Tasks.Task<string> GetPlanAmendmentsAsync(string strContractID, string strSubID)
        {
            return base.Channel.GetPlanAmendmentsAsync(strContractID, strSubID);
        }
        
        public string GetPlanCompensation(string strContractID, string strSubID)
        {
            return base.Channel.GetPlanCompensation(strContractID, strSubID);
        }
        
        public System.Threading.Tasks.Task<string> GetPlanCompensationAsync(string strContractID, string strSubID)
        {
            return base.Channel.GetPlanCompensationAsync(strContractID, strSubID);
        }
        
        public string deleteRSWorkFlow(string contractID, string subID, string userID)
        {
            return base.Channel.deleteRSWorkFlow(contractID, subID, userID);
        }
        
        public System.Threading.Tasks.Task<string> deleteRSWorkFlowAsync(string contractID, string subID, string userID)
        {
            return base.Channel.deleteRSWorkFlowAsync(contractID, subID, userID);
        }
        
        public TRS.IT.SI.Services.wsTrsPlanProv.ArrayOfXElement getTPACases(string contractXML)
        {
            return base.Channel.getTPACases(contractXML);
        }
        
        public System.Threading.Tasks.Task<TRS.IT.SI.Services.wsTrsPlanProv.ArrayOfXElement> getTPACasesAsync(string contractXML)
        {
            return base.Channel.getTPACasesAsync(contractXML);
        }
        
        public string GetPassLog(string PassStartDate, string PassEndDate, string CallAppUser)
        {
            return base.Channel.GetPassLog(PassStartDate, PassEndDate, CallAppUser);
        }
        
        public System.Threading.Tasks.Task<string> GetPassLogAsync(string PassStartDate, string PassEndDate, string CallAppUser)
        {
            return base.Channel.GetPassLogAsync(PassStartDate, PassEndDate, CallAppUser);
        }
        
        public string ListForPlanYrEndDt(string strForDate, string CallAppUser)
        {
            return base.Channel.ListForPlanYrEndDt(strForDate, CallAppUser);
        }
        
        public System.Threading.Tasks.Task<string> ListForPlanYrEndDtAsync(string strForDate, string CallAppUser)
        {
            return base.Channel.ListForPlanYrEndDtAsync(strForDate, CallAppUser);
        }
        
        public string ListForHardshipLift(string strStartDate, string strEndDate, string CallAppUser)
        {
            return base.Channel.ListForHardshipLift(strStartDate, strEndDate, CallAppUser);
        }
        
        public System.Threading.Tasks.Task<string> ListForHardshipLiftAsync(string strStartDate, string strEndDate, string CallAppUser)
        {
            return base.Channel.ListForHardshipLiftAsync(strStartDate, strEndDate, CallAppUser);
        }
        
        public string DocGenFundRider(string ContractID, string SubID, string CallingAppUserID)
        {
            return base.Channel.DocGenFundRider(ContractID, SubID, CallingAppUserID);
        }
        
        public System.Threading.Tasks.Task<string> DocGenFundRiderAsync(string ContractID, string SubID, string CallingAppUserID)
        {
            return base.Channel.DocGenFundRiderAsync(ContractID, SubID, CallingAppUserID);
        }
        
        public string DocGenDocument(string ContractID, string SubID, string DocType, string CallingAppUserID)
        {
            return base.Channel.DocGenDocument(ContractID, SubID, DocType, CallingAppUserID);
        }
        
        public System.Threading.Tasks.Task<string> DocGenDocumentAsync(string ContractID, string SubID, string DocType, string CallingAppUserID)
        {
            return base.Channel.DocGenDocumentAsync(ContractID, SubID, DocType, CallingAppUserID);
        }
        
        public string GenerateSPP(string cid, string sid, string QCDate, string cTypeOfDoc, string LoginID)
        {
            return base.Channel.GenerateSPP(cid, sid, QCDate, cTypeOfDoc, LoginID);
        }
        
        public System.Threading.Tasks.Task<string> GenerateSPPAsync(string cid, string sid, string QCDate, string cTypeOfDoc, string LoginID)
        {
            return base.Channel.GenerateSPPAsync(cid, sid, QCDate, cTypeOfDoc, LoginID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TRSPlanProvSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.TRSPlanProvSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TRSPlanProvSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://trs-services-tst.us.aegon.com:8443/TRSPlanProvisions/TrsPlanProv.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.TRSPlanProvSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://trs-services-tst.us.aegon.com:8443/TRSPlanProvisions/TrsPlanProv.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            TRSPlanProvSoap,
            
            TRSPlanProvSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.2.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
